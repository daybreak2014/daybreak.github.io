{"meta":{"title":"晓数点","subtitle":"Above all else, show the data.","description":"","author":"XiaoData","url":"http://xiaoDataTech.github.io","root":"/"},"pages":[{"title":"about","date":"2019-11-08T21:10:29.000Z","updated":"2019-11-08T21:10:29.332Z","comments":true,"path":"about/index.html","permalink":"http://xiaodatatech.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2019-11-08T21:09:47.708Z","updated":"2019-11-08T21:09:47.708Z","comments":false,"path":"tags/index.html","permalink":"http://xiaodatatech.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Html 速查","slug":"html","date":"2019-11-09T15:42:45.000Z","updated":"2019-11-13T20:30:00.691Z","comments":true,"path":"2019/11/09/html/","link":"","permalink":"http://xiaodatatech.github.io/2019/11/09/html/","excerpt":"HTML如果把网页比作洋葱，一层包一层，那html标签就是洋葱最外层的皮， html 元素是一张网页的根元素，所以其他所有元素都是是此元素的后代。 把一张网页比作一个人body标签就表示一个人所有的可见部分，如五官、四肢、痔疮… 对于真实存在的但是肉眼不可见的部分，如思想、人格、性取向等body标签是管不着的。 body包含着页面中所有的可见元素，比如链接、段落、图片… body是所有的可见元素的先人。 把一张网页比作一个人head标签就包含了一个人的基础信息，虽然无法直接观察到，但确实存在， 如姓名、人格、取向… head用于包含一张网页中抽象的基础信息（元信息）。head和body的区别在于body只想包含看得见摸得着的内容，如身材、长相、肤色等等， head中只能包含抽象的元信息，并不是说body不能包含抽象内容，它可以，只是它不想， 你硬要把抽象内容写进去也勉强行，但它更在乎看得见摸得着的。head不要，但body很诚实","text":"HTML如果把网页比作洋葱，一层包一层，那html标签就是洋葱最外层的皮， html 元素是一张网页的根元素，所以其他所有元素都是是此元素的后代。 把一张网页比作一个人body标签就表示一个人所有的可见部分，如五官、四肢、痔疮… 对于真实存在的但是肉眼不可见的部分，如思想、人格、性取向等body标签是管不着的。 body包含着页面中所有的可见元素，比如链接、段落、图片… body是所有的可见元素的先人。 把一张网页比作一个人head标签就包含了一个人的基础信息，虽然无法直接观察到，但确实存在， 如姓名、人格、取向… head用于包含一张网页中抽象的基础信息（元信息）。head和body的区别在于body只想包含看得见摸得着的内容，如身材、长相、肤色等等， head中只能包含抽象的元信息，并不是说body不能包含抽象内容，它可以，只是它不想， 你硬要把抽象内容写进去也勉强行，但它更在乎看得见摸得着的。head不要，但body很诚实 title标签用于指定浏览器标签上显示的标题，是个概括整张网页的存在，如：title中只可包含文本，若是包含标签，则包含的任何标签都会按源代码显示（浏览器不解释）。对搜索引擎来说title信息的重要性是无与伦比的，所以title中的信息要尽可能简洁准确。 h1，h2，h3，h4，h5，h6都是标题标签，用于概括页面中不同主题的内容，其中h1最大，h2其次，依次类推，没有h7。 p是段落标签（paragraph的缩写），用于给文字划分段落，一组p元素为一个段落 div标签在网页中划分区域，是division的缩写，无内容通常作为容器存在。 a标签定义链接，也叫做锚或锚链接，是anchor（锚）的缩写。href属性用于制定跳转的目标地址：默认target=&quot;_self&quot;，链接在当前页面打开；target=&quot;_blank&quot;，在新标签页打开。a中子元素也可作为链接，如图片链接。 img用于定义网页中的图片。我们平常在网页中见到的大部分图片都是用这个标签定义的。其中src（source）是img标签的一个属性，用于指定图片的地址。img 不允许存在结束标签，以下的写法是有误的：为什么？因为img不能存在子标签，所以无法作为容器存在，结束标签便没有意义了。 没有空间的杯子只是个玻璃块，盖子完全没有意义。img支持的所有的常用图片格式: .gif、.jpg、.png、.svg… table标签用于定义表格，单独出现并没有什么用，它需要和他专有的子标签在一起才有意义。table的子标签有：tr（table row）：定义行，出现一组就是一行，出现多组就是多行。td （table data）：定义单元格，一般包含在tr中。th （table head cell）：定义表头单元格，一般包含在thead中。thead （table head）：定义表头，见例子。tbody （table body）：定义表身，见例子。 header标签用于定义页头，也就是页面中的引导性内容，比如：taobao-headergoogle-headerfooter用于定义页脚，也就是页面中的补充性内容，比如：taobao-footergoogle-footerheader和footer本身和div没有任何区别，仅仅是字面上的区别，但使用它们可以让浏览器和搜索引擎更好的解读你的网页，同时也更有利于维护（一看就知道是页头页脚）。 link标签用于加载外部资源（也就是不属于本页面的资源，比如样式表、雪碧图之类），script标签用于加载脚本（一般为JavaScript）。这两个标签可以先做个基础的了解，它们在后面的CSS 表/9.x 和JavaScript 表/12.x 课程中会频繁的用到，一点就透，很直观。 如果在表单中使用button，不同浏览器对没有type属性的按钮点击（或回车提交）的解释是不同的（不需要在乎怎么不同，反正都是坑），这种情况下就需要明确指定type属性，如果想作为表单中的提交按钮可以指定type=”submit”，如：button type=”submit”注册/button，否则指定为type=”button”即可：button type=”button”发送验证码/button提交时用 input type=”submit” 还是 button type=”submit”？能用button就用button，因为它的功能要更强一些。button内部可以插文字甚至图片，input就不行，它就没有“内部”(:з」∠)。常用属性typebutton 不用说submit 不用说reset 重置表单，比如有一张表单，包含一个type=”reset”的按钮，点击这个按钮整张表单就会清空，见例1。 abbr标签 code一般用于小段代码。pre用于表示文字在编辑时的状态，比如在编辑器里的状态，所以一般被用于大段代码的展示，因为“所见即所得”。 input用于接收用户的输入。没有input用户就没法输入数据，登录注册什么的都不能做，复杂的表单就别想了。type属性input的类型比较多，每一种侧重于不同的数据类型和结构：input type=”text” 默认值（可以不填type属性），用于输入文字，如用户名，昵称等等。input type=”password” 密码输入，我们平时输密码时的小黑点就是这么来的。input type=”radio” 单选框，在需要用到单选但选项少的情况下使用。如性别（只有两个选项）。input type=”checkbox” 多选框（复选框），在需要用到多选但选项少时使用，多选，但是选项少的情况下使用。如性取向˙Ꙫ˙ 。input type=”file” 选择文件，上传文件必用。input type=”reset” 重置表单。input type=”hidden” value=”秘密” 隐形输入框，一般用于在表单提交时回传重要的令牌（就是一串自产自销的无序字符）来验证用户是真的或状态是对的。input type=”button” value=”点我” 按钮，不推荐，正常情况下使用button即可，因为button可以包含子元素，而input不行，灵活度的问题。 在HTML中元素即标签。 html是网页的最外层元素，包含着一张网页全部的内容。 body网页中所有的可视内容都应该包含在body元素中。 head用于包含一张网页中抽象的基础信息（元信息），如标题，描述等等。其中的信息通常是给机器看的。 title用于指定浏览器标签上显示的标题，用于概括整张网页。 div可用于网页中的区域划分，通常作为容器而存在。 a用于定义链接。 button用于定义按钮。 link用于引入外部资源如CSS。 script用于引入脚本（一般为JS）。 h1, h2, h3, h4, h5, h6标题标签，用于概括页面中的部分的内容，其中h1最大，h2其次，依次类推，没有h7。 span与div元素类似，只不过div用于插入整段（块）而span用于插入一个词，在表现上和普通文字没有区别。 input用于输入数据。input type=”text” 文字输入，默认值。input type=”radio” 单选，但是选项少的情况下使用。如性别（只有两个选项）。input type=”checkbox” 多选，但是选项少的情况下使用。如性取向。input type=”button” value=”点我” 按钮，不推荐，正常情况下button元素完全可以取代他。select下拉菜单，多选单选均可。 img用于显示图片。 p用于给文字划分段落，一个p就是以自然段。参考：表/6.6table, thead, tbody, tr, th, td用于插入表格。 table表格的最外层容器。thead表头。tbody表身。tr行。td单元格。th页头中的单元格。偶尔使用code, pre都是用于定义代码，pre用于定义长代码（代码块），code用于定义短代码（如变量，函数名等）。 abbr用于定义缩写（abbreviation）。 CSS","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://xiaodatatech.github.io/tags/html/"},{"name":"css","slug":"css","permalink":"http://xiaodatatech.github.io/tags/css/"},{"name":"js","slug":"js","permalink":"http://xiaodatatech.github.io/tags/js/"}]},{"title":"GDP是什么","slug":"what-is-gdp","date":"2019-11-08T23:29:54.000Z","updated":"2019-11-13T20:17:52.673Z","comments":true,"path":"2019/11/09/what-is-gdp/","link":"","permalink":"http://xiaodatatech.github.io/2019/11/09/what-is-gdp/","excerpt":"缘起19世纪时，还没有GDP的概念，那时研究经济的学者只能借助对一些日常生活中的观察，比如商店的销售情况、货物的运输情况等，来推测整体经济的运行情况。现代意义上的GDP概念，由美国经济学家Simon Kuznets在1934年提交给国会应对大萧条的报告中提出。Kuznets当时的想法是统一度量居民、公司和政府的所有经济活动。第一个正式的国名账户核算系统，可以追溯到1947年在英国经济学家Richard Stone领导下的国家联盟统计专家委员我向联合国统计委员会递交的一份报告。随后1953年，联合国在这份报告的基础上发布了第一个国际标准的国民账户核算系统（System of National Accounts，简称SNA），由此现代国民核算系统正式建立。Simon Kuznets和Richard Stone分别获得了1971年、1984年的诺贝尔经济学奖，以表彰他们在建立以GDP为核心的国民账户核算系统方面的贡献。","text":"缘起19世纪时，还没有GDP的概念，那时研究经济的学者只能借助对一些日常生活中的观察，比如商店的销售情况、货物的运输情况等，来推测整体经济的运行情况。现代意义上的GDP概念，由美国经济学家Simon Kuznets在1934年提交给国会应对大萧条的报告中提出。Kuznets当时的想法是统一度量居民、公司和政府的所有经济活动。第一个正式的国名账户核算系统，可以追溯到1947年在英国经济学家Richard Stone领导下的国家联盟统计专家委员我向联合国统计委员会递交的一份报告。随后1953年，联合国在这份报告的基础上发布了第一个国际标准的国民账户核算系统（System of National Accounts，简称SNA），由此现代国民核算系统正式建立。Simon Kuznets和Richard Stone分别获得了1971年、1984年的诺贝尔经济学奖，以表彰他们在建立以GDP为核心的国民账户核算系统方面的贡献。 定义GDP，英文全称 Gross domestic Product，翻译为国内生产总值。到底，什么是GDP呢？我们不妨看看一些权威机构给出的答案： 国家统计局, GDP是一个国家或地区的所有常驻单位在一定时期内生产的最终产品的价值总和。 OECD defines that, GDP is an aggregate measure of production equal to the sum of the gross values added of all resident and institutional units engaged in production and services (plus any taxes, and minus any subsidies, on products not included in the value of their outputs). IMF states that, GDP measures the monetary value of final goods and services—that are bought by the final user—produced in a country in a given period of time (say a quarter or a year). 在这个抽象的定义中包含着若干个重要的概念： 国家地区GDP的统计范围是有地域边界，既可以是单个国家（如中国），也可以是多国联盟（如欧盟）。 常驻单位GDP的统计对象是清晰明确的，一国经济领土内从事经济活动，并且有一定规模和时间的居民和机构。 一定时期GDP是一个流量概念，并非存量，衡量一段时间内的生产经营成果。 市场价值GDP是对市场价值的度量，各种商品和服务，以市场价格折算加总。市场价格本身隐含了买卖双方的偏好信息，在一定程度上与居民福利相关。 最终成果GDP只统计最终产品，不包括中间产品。最终产品不再用于生产，或转移至新产品，避免重复计算。 GDP本质上是一个市场经济的概念，而市场经济是一个收入、支出、生产的循环过程。出售商品和服务获得的收入，通过生产要素（人力、资本、土地等）支付给居民、企业和政府。剧名、企业和政府，又将收入支出，最终汇总为消费、投资、政府购买和净出口。企业生产商品和服务出售，重新形成循环，周而复始。 Circular Flow 核算GDP本身可从三个角度来理解： 从收入角度，人力、资本、土地等生产要素的报酬，演变为居民、企业和政府收入之和，形成GDP。 从支出角度，GDP是最终商品和服务的市场价值之和。而居民、企业和政府购买商品和服务的行为决策，最终形成消费、投资、政府支出和净出口。 从生产角度，GDP是所有产品的价值增量之和。统计所有产品的价值增量并加总，即可形成GDP。 每一种角度恰好对应一种GDP的核算方法： 收入法GDP，从收入方面加总居民、企业和政府的收入。 GDP = 收入总量 = 劳动者报酬 + 公司盈余 + 生产税净额 + 固定资产折旧尽管很重要，但收入法GDP的状况略显尴尬，目前只能在投入产出表（Input-Output Table）中找到。而投入产出表，仅在尾数为0、2、5、7的年份公布。 支出法GDP，从需求方面计算产品的最终去向。 GDP = 最终去向 = 最终消费支出 + 资本形成总额 + 净出口其中， 最终消费支出 = 居民消费支出 + 政府消费支出 资本形成总额 = 固定资本形成总额 + 存货变动而固定资本又可分为有形资本（住宅、非住宅建筑、机器设备等）和无形资本，存货主要包括原财力、半成品、产成品。支出法GDP在发达国家很重要，欧美每季度公布的GDP数据均是由支出法得到的。中国的支出法GDP则按年度公布，与生产法GDP的数据存在一定差异，仍需完善。 生产法GDP，从生产方面衡量产品的价值增量。 GDP = 价值增量 = (第一、二、三产业)[总产出 - 中间投入]生产法GDP分季度核算和年度核算。季度核算细分至35个行业，大多使用相关指标推算，略微粗糙；年度核算细分成94个行业，充分利用财务统计资料，比较细致。目前，我国主要采用生产法和收入法混合计算，称为生产法GDP。统计局在每季度或年度下月中旬公布GDP数据。 上述三种方法核算GDP，从理论上讲应该是一致的。但由于资料来源不同，结果存在一定差异。GDP数据会随着初步核算、初步核实、最终核实的进度而进行修订。除此之外，经济普查还会对历史数据进行修订，包括总量与增速。对GDP历史数据的历次修订如下表所示 时间 修订 事项 2016 1952-2015年数据 改革研发支出（2008SNA） 2014 1952-2013年数据 2013第三次经济普查 2009 2005-2008年数据 2008第二次经济普查 2005 1993-2004年数据 2003第一次经济普查 1995 1978-1992年数据 1995第一次三产普查 GDP+Growth 1978年到2018年，整整40年， GDP从区区3600亿增长到了2018年90多万亿，成为世界第二大经济体。在40年间中国的GDP翻了250倍左右，这不得不说是一个奇迹。在GDP的总量图中，几乎看不到修订历史数据对GDP的影响。而在GDP的增速图中，除了个别年份有些许差异，大多数时候，修订历史数据均影响也不大。 解读名义GDP（Nominal GDP），又称现价GDP，统计局公布的GDP总量是以当期价格计算的。名义GDP等于产量乘以当期价格。 nGDP_t = Y_t \\times P_t产量增加和价格上升均引起名义GDP的增长。为了消除价格变动的因素，反映产出的实际变化，需要将不同时期的数据按某个固定基期价格折算。折算后的GDP叫做实际GDP（Real GDP），又称不变价GDP。 rGDP_t = Y_t \\times P_{base}在现实中，更关注的是实际GDP增速，简称GDP增速（GDP Growth）。 rGDP\\% = rGrowth_t = \\frac{rGDP_t-rGDP_{t-1}}{rGDP_{t-1}} = \\frac{Y_t-Y_{t-1}}{Y_{t-1}}根据GDP的定义简单推导，可得 nGDP\\% = nGrowth_t = \\frac{Y_tP_t-Y_tP_{t-1}+Y_tP_{t-1}-Y_{t-1}P_{t-1}}{Y_{t-1}P_{t-1}} \\approx \\frac{Y_t-Y_{t-1}}{Y_{t-1}} + \\frac{P_t-P_{t-1}}{P_{t-1}}因此通常可认为 nGDP\\% \\approx rGDP\\% + P\\%统计局定期公布的GDP增速都是以基期价格计算的实际GDP增速。我国自开始核算GDP以来，有1952、1957、1970、1980、1990、2000、2005、2010、2015共9个基期。GDP是衡量一个国家总体经济规模的最强有力的指标，下图给出了中国1952-2018年的GDP增速图。1978年以前，经济大起大落，波动较大。改革开放以后，经济逐步平稳，大多数年份都在高速增长。经济稳定，并持续增长，这才是从平穷走向富强的正确道路。 Growth 中国对GDP的深入分析，可了解一个国家的经济结构及变化规律。从产业角度，反映第一产业、第二、第三产业结构比例（可以简单理解为，农业、工业、服务业）（图片）。图片分析，第一产业占比逐渐下降，第二产业占比稳定在40%，第三产业不断上升。 从需求角度，反映消费、投资、净出口所占比重（图片）；消费占比从60%下降至50%，投资占比从38%上升至50% 从地区角度，反映不同地区经济发展差异。 （年度增速曲线，增加十年平均线，1978-1989，1990-1999，2000-2009，2010-2019） 世界与美国、日本、韩国相比较。 在国家之间进行GDP的比较时，需要将采用不同货币度量的GDP数据转换成统一的货币。通常有两种办法，一种是采用当前货币汇率，另一种是采用购买力平价（Purchasing Power Parity，简称PPP）汇率。采用当前货币汇率，可以更好的反映一个国家的国际购买力水平。高GDP国家的物价水平往往高于低GDP国家，采用力平价汇率，可以有效减小因价格水平不同而造成的地区差异。 不足尽管GDP很重要，但它仍有很多不足。首先，GDP不能反映社会成本。经济增长过程中，对自然资源的消耗，对自然环境的破坏，都很难度量。其次，GDP不能反映增长质量。GDP是流量而不是存量，经济增长并不意味着财富增加，即使增加也可能存在地区间的不均衡发展。最后，GDP不能准确衡量社会效用。一个国家的整体效用，不仅包括经济收入，还包括闲暇、幸福、安全等，这些均无法度量。最后，让我们的视线再次回到Kuznets，细细品味他当年说过的话。 In 1934, “National Income, 1929–1932”: The valuable capacity of the human mind to simplify a complex situation in a compact characterization becomes dangerous when not controlled in terms of definitely stated criteria. With quantitative measurements especially, the definiteness of the result suggests, often misleadingly, a precision and simplicity in the outlines of the object measured. In 1962, “How To Judge Quality”: Distinctions must be kept in mind between quantity and quality of growth, between costs and returns, and between the short and long run. Goals for more growth should specify more growth of what and for what. 总结 一看总量，二看增速，三看构成（产业、需求），四看贡献（产业，需求），五横向比较","categories":[],"tags":[{"name":"Macro","slug":"Macro","permalink":"http://xiaodatatech.github.io/tags/Macro/"},{"name":"GDP","slug":"GDP","permalink":"http://xiaodatatech.github.io/tags/GDP/"}]},{"title":"GitHub个人博客","slug":"github-blog","date":"2019-11-08T22:47:52.000Z","updated":"2019-11-08T23:50:02.147Z","comments":true,"path":"2019/11/09/github-blog/","link":"","permalink":"http://xiaodatatech.github.io/2019/11/09/github-blog/","excerpt":"一、环境配置GitHub登录GitHub， 注册一个账号。点击页面右上角+号，新建仓库 New repository ，仓库名称 Repository name 中输入 yourname.github.io ，创建仓库 Create repository 。 Git登录Git，下载适用于当前操作系统的最新版本，并安装。安装过程中，建议勾选 Windows Explorer integartion 。安装完成后，右键我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量Path编辑，添加 C:\\Program Files\\Git\\cmd 。 打开Git Bash，输入 $ git config --global user.name &quot;yourname&quot; $ git config --global user.email &quot;youremail@example.com&quot; $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 在 C:\\Users\\Yourname\\.ssh 中找到刚生成的id_rsa.pub文件，打开并复制其中的内容。登录Github，进入上一步新建的仓库 yourname.github.io ，然后点击 Settings -&gt; Deploy keys -&gt; Add deploy key 。粘贴刚刚复制的内容到 key 空白栏中，选中 Allow write access 添加新Key。","text":"一、环境配置GitHub登录GitHub， 注册一个账号。点击页面右上角+号，新建仓库 New repository ，仓库名称 Repository name 中输入 yourname.github.io ，创建仓库 Create repository 。 Git登录Git，下载适用于当前操作系统的最新版本，并安装。安装过程中，建议勾选 Windows Explorer integartion 。安装完成后，右键我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量Path编辑，添加 C:\\Program Files\\Git\\cmd 。 打开Git Bash，输入 $ git config --global user.name &quot;yourname&quot; $ git config --global user.email &quot;youremail@example.com&quot; $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 在 C:\\Users\\Yourname\\.ssh 中找到刚生成的id_rsa.pub文件，打开并复制其中的内容。登录Github，进入上一步新建的仓库 yourname.github.io ，然后点击 Settings -&gt; Deploy keys -&gt; Add deploy key 。粘贴刚刚复制的内容到 key 空白栏中，选中 Allow write access 添加新Key。 如果需要在同一台电脑管理多个Git账户，则需要执行以下命令 $ git config --global --unset user.name &quot;yourname&quot; $ git config --global --unset user.email &quot;yourname@email.com&quot; $ ssh-keygen -t rsa -C &quot;user1@example.com&quot; -f ~/.ssh/id1_rsa $ ssh-keygen -t rsa -C &quot;user2@example.com&quot; -f ~/.ssh/id2_rsa 将 ~/.ssh/ 目录中新生成的公钥 id1_rsa.pub 和 id2_rsa.pub 分别添加到不同的Git账户中。在 ~/.ssh/ 目录下新建 config 文件，添加如下内容 # 配置 user1 Github Host user1 HostName github.com User user1@exmaple.com PreferredAuthentications publickey IdentityFile ~/.ssh/id1_rsa # 配置 user2 GitLab Host user2 HostName gitlab.com User user2@example.com PreferredAuthentications publickey IdentityFile ~/.ssh/id2_rsa 打开Git Bash，输入以下命令，验证是否成功 $ ssh -T git@user1 Git常用命令见附录A。 Nodejs登录Node.js， 下载最新版本并安装。安装后添加系统环境变量C:\\Program Files\\nodejs\\ 。 打开Git Bash，输入 $ node -v $ npm -v #返回版本号，则安装成功 Cmder登录Cmder， 下载最新版本。解压至安装位置，例如 C:\\Program Files\\ ，添加系统环境变量 C:\\Program Files\\cmder\\ 。 以管理员权限打开命令行，执行以下命令，可将 Cmder here 添加到右键菜单。 $ Cmder.exe /REGISTER ALL Typora登录Typora， 下载最新版本并安装。Typora是一款简洁并且高效的Markdown编辑器，支持即时渲染，所见即所得，使写Markdown文件变得优雅流畅。 Markdown常用语法见附录B。 二、Hexo 部署Hexo 安装Hexo是一个快速、简洁且高效的静态博客框架，搭配GitHub和Typora使用可事半功倍。前期搭建好环境后，博客作者可以从网页技术中脱身出来，专注于文字内容的创作和思维逻辑的探索。 在电脑的任意位置，新建一个文件夹，例如 E:\\Project\\Blog (下文简称为 Blog文件夹 )。进入该文件夹，右键 Cmder Here ，输入 $ npm install -g hexo-cli #安装hexo $ hexo -v #返回版本号，则hexo安装成功 $ hexo init [folder] #初始化， 未设置folder，默认在当前文件夹 $ npm install #npm自动安装所需的文件 $ npm install hexo-deployer-git --save Hexo 配置打开 Blog文件夹 目录下的 _config.yml 文件，做如下更改 # Site title: XXX #网站标题 description: XXX #网站描述 author: XXX #作者 language: zh-CN #设置语言 # Writing post_asset_folder: true #新建文章时自动生成同名文件夹，方便管理相关资源 # Extensions theme: next #设置主题 # Deployment deploy: type: git #配置deploy，采用SSH地址 repo: git@github.com:yourname/yourname.github.io.git branch: master #多账户时，git@user1: 执行 $ hexo generate 命令，生成 .deploy_git/.git/config 文件后，在.deploy_git/.git/config 文件中，添加如下内容 [user] name = user1 email = user1@example.com 或者在 .deploy_git/.git/config 文件，右键 Cmder Here ，输入以下命令 $ git config user.name &quot;yourname&quot; $ git config user.email &quot;yourname@email.com&quot; NexT 配置NexT主题是Hexo的一个扩展主题，简洁易用。最初是由iissnan开发的，现在由NexT社区维护。最简单的安装方法就是，进入 Blog文件夹 ，右键 Cmder Here ，输入 $ git clone https://github.com/theme-next/hexo-theme-next themes/next 添加页面在Cmder中，输入命令 $ hexo new page tags #添加标签页面 $ #hexo new page about #添加关于页面 $ #hexo new categories #添加分类页面 编辑 Blog/source/ 文件夹下生成的相应的 index.md 文件 title: 标签 date: 2019-11-04 04:40:31 type: &quot;tags&quot; comments: false 设置外观打开 themes/next/ 目录下的 _config.yml 文件 #shceme: Muse #大量留白 shceme: Mist #紧凑有序 #scheme: Pisces #清新碧玉 设置菜单 menu: home: / || home #主页 #about: /about/ || user #关于页面 tags: /tags/ || tags #标签页 #categories: /categories/ || th archives: /archives/ || archive #归档页 设置侧栏 sidebar: position: right #右侧 display: hide #隐藏，可手动展开 设置头像 avatar: url: /images/avatar.jpg #头像图片置于相应位置 rounded: true #圆角图标 社交链接 social: GitHub: https://github.com/yourname || github Weibo: https://weibo.com/yourname || weibo github_banner: enable: true #开启GitHub右上角横幅 permalink: https://github.com/yourname 设置打赏 reward_settings: enable: true comment: Donate comment here. reward: wechatpay: /images/wechatpay.png alipay: /images/alipay.png bitcoin: /images/bitcoin.png 设置脚注 footer: since: 2019 powered: enable: false # Hexo link (Powered by Hexo). version: false # Version info of Hexo after Hexo link (vX.X.X). theme: enable: false # Theme &amp; scheme info link (Theme - NexT.scheme). version: false # Version info of NexT after scheme info (vX.X.X). 阅读次数统计 busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 本地搜索进入 Blog文件夹 ，右键 Cmder Here ，输入命令 $ npm install hexo-generator-searchdb 打开 Blog文件夹 下的 _config.yml 文件，添加如下内容 search: path: search.xml field: post format: html limit: 10000 编辑 themes/next/ 目录下的 _config.yml 文件 local_search: enable: true 图片居中将 themes/next/source/css/_schemes/Mist/_posts-expand.styl 文件中 .post-body img { margin-left: 0; } 修改为 .post-body img { margin-center: 0; } 插入图片时，可执行以下任一语句 {% image img.png 'img' '' %} #Markdown &lt;img src=&quot;{% asset_path kuznets.jpg %}&quot;&gt; {% asset_img kuznets.jpg %} #Hexo tag 或者直接使用新版NexT的Tag Plugins {% gp 2-1 %} {% asset_img img1.jpg [title1] %} {% asset_img img1.jpg [title2] %} {% endgp %} 设置公式编辑 themes/next/ 目录下的 _config.yml 文件 math: per_page: true mathjax: enable: true 需要渲染公式的博文，在Front-matter加入语句 mathjax: true 选择 hexo-renderer-kramed 渲染公式，在 Blog文件夹 右键 Cmder Here ，输入命令 $ npm uninstall hexo-renderer-marked $ npm install hexo-renderer-kramed Hexo 体验进入 Blog文件夹 ，右键 Cmder Here ，输入命令 $ hexo generate #生成静态文件 $ hexo server #启用服务器 此时，在浏览器中输入 http://localhost:4000/ 可在本地查看个人博客。 写博客并发布文章，只需在 Cmder 中输入 $ hexo new post &quot;article&quot; #新建一篇博文 $ hexo clean #清除缓存 $ hexo generate #生成静态文件 $ hexo deploy #部署网站至GitHub 至此，个人博客已成功建立，在浏览器中输入 yourname.github.io 即可查看。 这下不能再拖了，得专心写文章了。 附录A. Git 常用命令$ git status #查看仓库状态 $ git clone #克隆原始仓库 $ git remote #列出已经存在的远端仓库 $ git remote -v #列出远端仓库及url $ git remote set-url #更改远端仓库url $ git add #提交所有变化到暂存区 $ git commit #将暂存区改动提交到本地版本 $ git commit -a #将暂存区改动和新修改文件提交到本地版本 $ git pull #把本地仓库推送到远端 $ git push #把远端仓库拉回到本地 B. Markdown 常用语法# 一阶标题 ## 二阶标题 ### 三阶标题 #### 四阶标题 ##### 五阶标题 ###### 六阶标题 **加粗内容** *倾斜内容* ~~删除内容~~ 1.2.3. 有序列表 +-* 无序列表 --- 分割线 [超链接](https://www.xxx.com) {% image ./image.jpg '图片' '' %}","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://xiaodatatech.github.io/tags/Hexo/"},{"name":"NexT","slug":"NexT","permalink":"http://xiaodatatech.github.io/tags/NexT/"},{"name":"Cmder","slug":"Cmder","permalink":"http://xiaodatatech.github.io/tags/Cmder/"},{"name":"GitHub","slug":"GitHub","permalink":"http://xiaodatatech.github.io/tags/GitHub/"},{"name":"Typora","slug":"Typora","permalink":"http://xiaodatatech.github.io/tags/Typora/"}]},{"title":"hello","slug":"hello","date":"2019-11-08T19:05:45.000Z","updated":"2019-11-08T22:46:06.487Z","comments":true,"path":"2019/11/09/hello/","link":"","permalink":"http://xiaodatatech.github.io/2019/11/09/hello/","excerpt":"Some people feels the rain, others just get wet.","text":"Some people feels the rain, others just get wet. harry1","categories":[],"tags":[]}]}